1.필터는 클라이언트의 요청을 가로채어 요청된 페이지 실행 전 또는 실행 후 부가적인 처리를 할 수 있는 기술이다.

2.필터는 Filter 인터페이스를 상속받아 구현한다.

3.Filter의 init() 메소드는 필터 객체 생성 시 호출된다.

4.Filter의 doFilter() 메소드는 필터를 매핑한 페이지가 실행될 때마다 호출된다.

5.Filter의 destory() 메소드는 필터 객체 삭제 시 호출된다.

6.구현된 필터는 웹서버에 등록해야 사용할 수 있다. 등록 방법은 web.xml 에 <filter>
								<filter-name>사용자 지정이름</filter-name>
								<filter-class>실제 클래스가 있는곳</filter-class>
							          </filter>
@WebFilter() filterName 속성으로 등록할 수있다.

7.필터가 요청을 가로챌 페이지를 매핑하는 방법은 web.xml 의<filter-mapping>
							<filter-name>위 이름</filter-name>
							<url-pattern>가로챌 서비스페이지</url-pattern>
						   </filter-mapping>

@WebFilter()의 urlPatterns 속성으로 설정하는 방법이 있다.

8.리스너는 어떤 이벤트 소스에서 어떤 이벤트가 발생했을 때 자동으로 호출되는 메소드를 가지는 객체로서 이벤트 핸들러라고도 한다.

9.Listener는 ServletContext, HttpSession, HttpServletRequest의 생성, 삭제
  데이터의 등록, 삭제, 대체 이벤트가 발생했을때 실행될 메소드를 제공한다.

10.리스너의 구현은 원하는 이벤트 메소드를 가지고 있는 리스너를 상속한 후 메소드를 재정의한다.

11.구현된 리스너는 웹서버에 등록해야 한다. 등록 방법은 web.xml에 <listener><listener-class>클래스 있는곳</listener-class></listener>
    태그로 등록하는 방법과 리스너 소스에서 @WebListener으로 설정하는 방법이 있다.

12.오류 처리 방법은 try-catch 문과 web.xml에 <error-page>로 처리하는 방법이 있다.

13.try-catch 문은 try 블록이 오류 처리 범위이고 <error-page>는 웹 애플리케이션이 오류 처리 범위이다. 